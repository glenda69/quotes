In the information age, the barriers [to entry into programming] just aren't there. The barriers are self imposed. If you want to set off and go develop some grand new thing, you don't need millions of dollars of capitalization. You need enough pizza and Diet Coke to stick in your refrigerator, a cheap PC to work on, and the dedication to go through with it. We slept on floors. We waded across rivers.
Honestly, I spend very little time thinking about past events, and I certainly don't have them ranked in any way. I look back and think that I have done a lot of good work over the years, but I am much more excited about what the future holds.
Because of the nature of Moore's law, anything that an extremely clever graphics programmer can do at one point can be replicated by a merely competent programmer some number of years later.
The Xbox 360 is the first console that I've ever worked with that actually has development tools that are better for games than what we've had on PC.
Nvidia's OpenGL drivers are my 'gold standard', and it has been quite a while since I have had to report a problem to them, and even their brand new extensions work as documented the first time I try them. When I have a problem on an Nvidia, I assume that it is my fault. With anyone else's drivers, I assume it is their fault.
The situation is so much better for programmers today - a cheap used PC, a linux CD, and an internet account, and you have all the tools necessary to work your way to any level of programming skill you want to shoot for.
Note to self: Pasty-skinned programmers ought not stand in the Mojave desert for multiple hours.
The speed of light sucks.
Story in a game is like a story in a porn movie. It's expected to be there, but it's not that important.
I'm good? Seriously?
It's nice to have a game that sells a million copies.
It's done, when it's done.
It's a good thing Doom 3 is selling very well...
At its best, entertainment is going to be a subjective thing that can't win for everyone, while at worst, a particular game just becomes a random symbol for petty tribal behavior.
This is a bit more expensive than my previous turbo-Ferrari habit, but not too bad.
The idea that I can be presented with a problem, set out to logically solve it with the tools at hand, and wind up with a program that could not be legally used because someone else followed the same logical steps some years ago and filed for a patent on it is horrifying.
Programming in the abstract sense is what I really enjoy. I enjoy lots of different areas of it... I'm taking a great deal of enjoyment writing device drivers for Linux. I could also be having a good time writing a database manager or something because there are always interesting problems.
I was sort of an amoral little jerk when I was young. I was arrogant about being smarter than other people, but unhappy that I wasn't able to spend all my time doing what I wanted. I spent a year in a juvenile home for a first offense after an evaluation by a psychologist went very badly.
Personally, I’ve always been of the sleek and minimalist design school: make sure the core play is consistent and strong, then let that idea play out against different environments and challenges, this tends toward focusing on bio-mechanical twitch responses, audio-visual awe, and leaning more toward general strategy and tactics development over specific puzzle solving.
Sharing the code just seems like The Right Thing to Do, it costs us rather little, but it benefits a lot of people in sometimes very significant ways. There are many university research projects, proof of concept publisher demos, and new platform test beds that have leveraged the code. Free software that people value adds wealth to the world.
Advances in technology won’t be as significant as they have been in the past, most games won’t be materially improved by simulating every drop of water in the pond you are wading through. More resources can be profitably spent to make the creation process easier. How things will play out with respect to connectivity and where the data resides and processing takes place is still a very interesting question. The overlap and convergence between desktop computers, consoles, laptops, handheld gaming devices, and cell phones is also interesting. It is all still quite exciting.
Helping people directly can be a noble thing. Forcing other people to do it with great inefficiency? Not so much. There isn’t a single thing that I would petition the federal government to add to its task list, and I would ask that it stop doing the majority of the things that it is currently doing. My vote is going to the candidates that at least vector in that direction.
The Escalation programmers come from a completely different background, and the codebase is all STL this, boost that, fill-up-the-property list, dispatch the event, and delegate that. I had been harboring some suspicions that our big codebases might benefit from the application of some more of the various “modern” C++ design patterns, despite seeing other large game codebases suffer under them. I have since recanted that suspicion.
Focused, hard work is the real key to success. Keep your eyes on the goal, and just keep taking the next step towards completing it. If you aren't sure which way to do something, do it both ways and see which works better.
A large fraction of the flaws in software development are due to programmers not fully understanding all the possible states their code may execute in.
